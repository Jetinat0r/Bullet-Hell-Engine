using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SpawnerEffect : ScriptableObject
{
    [Header("Base Vars")]
    //The difference between these two vars is that Type is used for all prefabs of an effect, i.e. Rotate_Effect, while Name is used for individual setups, i.e. Rotate_45_Clockwise_Effect
    //Type is designed for other effects to grab this one, even if the values are different (i.e. an effect can grab a Rotate_Effect whether it's Rotate_45_Clockwise or Rotate_15_CounterClockwise)
    //Name is used by the object pooler to grab specific prefabs of effects

    //A tag for the type of spawner effect it is. Used so other effects can locate this one. Should not be changed after caching
    public string spawnerEffectType = "DEFAULT_SPAWNER_EFFECT_TYPE";

    //The key for the specific setup of the spawner effect. Should never be changed after being cached in CachedBHEResources
    public string spawnerEffectName = "DEFAULT_SPAWNER_EFFECT_NAME";

    

    /// <summary> 
    /// Determines if this effect should be passed to spawners generated by projectiles it creates
    /// 
    /// I can't think of any cases that would make it so that 
    /// 
    /// A value of -1 will pass the effect every time (logic is: inherit when != 0)
    /// This needs to be decremented every time a projectile adds a new copy of the effect TO a SPAWNER, not from the spawner when added to a projectile or anywhere else
    /// </summary>
    public int generationsToInheritEffect = -1;
    protected bool hasAppliedEffects = false;
    protected bool hasAppliedLateEffects = false;

    public virtual void Init()
    {
        hasAppliedEffects = false;
    }

    public virtual void Copy(SpawnerEffect oldEffect)
    {
        //spawnerEffectType = oldEffect.spawnerEffectType;
        //spawnerEffectName = oldEffect.spawnerEffectName;

        generationsToInheritEffect = oldEffect.generationsToInheritEffect;

        hasAppliedEffects = false;
        hasAppliedLateEffects = false;
    }

    public virtual void AddEffects(ProjectileSpawner spawner)
    {
        if (!hasAppliedEffects)
        {

        }

        hasAppliedEffects = true;
    }

    public virtual void LateAddEffects(ProjectileSpawner spawner)
    {
        if (!hasAppliedLateEffects)
        {

        }

        hasAppliedLateEffects = true;
    }

    public virtual void UpdateEffects(ProjectileSpawner spawner)
    {

    }

    public virtual void RemoveEffects(ProjectileSpawner spawner)
    {
        hasAppliedEffects = false;
        hasAppliedLateEffects = false;
    }
}
