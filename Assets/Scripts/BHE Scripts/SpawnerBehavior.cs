using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SpawnerBehavior : ScriptableObject
{
    //The difference between these two vars is that Type is used for all prefabs of an behavior, i.e. Rotate_Behavior, while Name is used for individual setups, i.e. Rotate_45_Clockwise_Behavior
    //Type is designed for other behaviors to grab this one, even if the values are different (i.e. an behavior can grab a Rotate_Behavior whether it's Rotate_45_Clockwise or Rotate_15_CounterClockwise)
    //Name is used by the object pooler to grab specific prefabs of behaviors

    //A tag for the type of spawner behavior it is. Used so other behaviors can locate this one. Should not be changed after caching
    public const string SpawnerBehaviorType = "DEFAULT_SPAWNER_EFFECT_TYPE";
    public virtual string GetSpawnerBehaviorType() => SpawnerBehaviorType;

    [Header("Base Vars")]
    //The key for the specific setup of the spawner behavior. Should never be changed after being cached in CachedBHEResources
    public string SpawnerBehaviorName = "DEFAULT_SPAWNER_EFFECT_NAME";

    

    /// <summary> 
    /// Determines if this behavior should be passed to spawners generated by entities it creates
    /// 
    /// I can't think of any cases that would make it so that 
    /// 
    /// A value of -1 will pass the behavior every time (logic is: inherit when != 0)
    /// This needs to be decremented every time a entity adds a new copy of the behavior TO a SPAWNER, not from the spawner when added to a entity or anywhere else
    /// </summary>
    public int generationsToInheritBehavior = -1;
    protected bool hasAppliedBehaviors = false;
    protected bool hasAppliedLateBehaviors = false;

    public virtual void Init()
    {
        hasAppliedBehaviors = false;
    }

    public virtual void Copy(SpawnerBehavior oldBehavior)
    {
        //spawnerBehaviorType = oldBehavior.spawnerBehaviorType;
        //spawnerBehaviorName = oldBehavior.spawnerBehaviorName;

        generationsToInheritBehavior = oldBehavior.generationsToInheritBehavior;

        hasAppliedBehaviors = false;
        hasAppliedLateBehaviors = false;
    }

    public virtual void AddBehaviors(EntitySpawner spawner)
    {
        if (!hasAppliedBehaviors)
        {

        }

        hasAppliedBehaviors = true;
    }

    public virtual void LateAddBehaviors(EntitySpawner spawner)
    {
        if (!hasAppliedLateBehaviors)
        {

        }

        hasAppliedLateBehaviors = true;
    }

    public virtual void UpdateBehaviors(EntitySpawner spawner)
    {

    }

    public virtual void RemoveBehaviors(EntitySpawner spawner)
    {
        hasAppliedBehaviors = false;
        hasAppliedLateBehaviors = false;
    }
}
